// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module mage_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 9
) (
    input logic clk_i,
    input logic rst_ni,
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o,
    // To HW
    output mage_reg_pkg::mage_reg2hw_t reg2hw,  // Write
    input mage_reg_pkg::mage_hw2reg_t hw2reg,  // Read


    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);

  import mage_reg_pkg::*;

  localparam int DW = 32;
  localparam int DBW = DW / 8;  // Byte Width

  // register signals
  logic               reg_we;
  logic               reg_re;
  logic [BlockAw-1:0] reg_addr;
  logic [     DW-1:0] reg_wdata;
  logic [    DBW-1:0] reg_be;
  logic [     DW-1:0] reg_rdata;
  logic               reg_error;

  logic addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] cfg_pe_00_qs;
  logic [31:0] cfg_pe_00_wd;
  logic cfg_pe_00_we;
  logic [31:0] cfg_pe_01_qs;
  logic [31:0] cfg_pe_01_wd;
  logic cfg_pe_01_we;
  logic [31:0] cfg_pe_02_qs;
  logic [31:0] cfg_pe_02_wd;
  logic cfg_pe_02_we;
  logic [31:0] cfg_pe_03_qs;
  logic [31:0] cfg_pe_03_wd;
  logic cfg_pe_03_we;
  logic [31:0] cfg_pe_10_qs;
  logic [31:0] cfg_pe_10_wd;
  logic cfg_pe_10_we;
  logic [31:0] cfg_pe_11_qs;
  logic [31:0] cfg_pe_11_wd;
  logic cfg_pe_11_we;
  logic [31:0] cfg_pe_12_qs;
  logic [31:0] cfg_pe_12_wd;
  logic cfg_pe_12_we;
  logic [31:0] cfg_pe_13_qs;
  logic [31:0] cfg_pe_13_wd;
  logic cfg_pe_13_we;
  logic [31:0] cfg_pe_20_qs;
  logic [31:0] cfg_pe_20_wd;
  logic cfg_pe_20_we;
  logic [31:0] cfg_pe_21_qs;
  logic [31:0] cfg_pe_21_wd;
  logic cfg_pe_21_we;
  logic [31:0] cfg_pe_22_qs;
  logic [31:0] cfg_pe_22_wd;
  logic cfg_pe_22_we;
  logic [31:0] cfg_pe_23_qs;
  logic [31:0] cfg_pe_23_wd;
  logic cfg_pe_23_we;
  logic [31:0] cfg_pe_30_qs;
  logic [31:0] cfg_pe_30_wd;
  logic cfg_pe_30_we;
  logic [31:0] cfg_pe_31_qs;
  logic [31:0] cfg_pe_31_wd;
  logic cfg_pe_31_we;
  logic [31:0] cfg_pe_32_qs;
  logic [31:0] cfg_pe_32_wd;
  logic cfg_pe_32_we;
  logic [31:0] cfg_pe_33_qs;
  logic [31:0] cfg_pe_33_wd;
  logic cfg_pe_33_we;
  logic [31:0] pea_constants_0_qs;
  logic [31:0] pea_constants_0_wd;
  logic pea_constants_0_we;
  logic [31:0] pea_constants_1_qs;
  logic [31:0] pea_constants_1_wd;
  logic pea_constants_1_we;
  logic [31:0] pea_constants_2_qs;
  logic [31:0] pea_constants_2_wd;
  logic pea_constants_2_we;
  logic [31:0] pea_constants_3_qs;
  logic [31:0] pea_constants_3_wd;
  logic pea_constants_3_we;
  logic [31:0] pea_constants_4_qs;
  logic [31:0] pea_constants_4_wd;
  logic pea_constants_4_we;
  logic [31:0] pea_constants_5_qs;
  logic [31:0] pea_constants_5_wd;
  logic pea_constants_5_we;
  logic [31:0] pea_constants_6_qs;
  logic [31:0] pea_constants_6_wd;
  logic pea_constants_6_we;
  logic [31:0] pea_constants_7_qs;
  logic [31:0] pea_constants_7_wd;
  logic pea_constants_7_we;
  logic [31:0] pea_constants_8_qs;
  logic [31:0] pea_constants_8_wd;
  logic pea_constants_8_we;
  logic [31:0] pea_constants_9_qs;
  logic [31:0] pea_constants_9_wd;
  logic pea_constants_9_we;
  logic [31:0] pea_constants_10_qs;
  logic [31:0] pea_constants_10_wd;
  logic pea_constants_10_we;
  logic [31:0] pea_constants_11_qs;
  logic [31:0] pea_constants_11_wd;
  logic pea_constants_11_we;
  logic [31:0] pea_constants_12_qs;
  logic [31:0] pea_constants_12_wd;
  logic pea_constants_12_we;
  logic [31:0] pea_constants_13_qs;
  logic [31:0] pea_constants_13_wd;
  logic pea_constants_13_we;
  logic [31:0] pea_constants_14_qs;
  logic [31:0] pea_constants_14_wd;
  logic pea_constants_14_we;
  logic [31:0] pea_constants_15_qs;
  logic [31:0] pea_constants_15_wd;
  logic pea_constants_15_we;
  logic [31:0] pea_rf_0_qs;
  logic [31:0] pea_rf_0_wd;
  logic pea_rf_0_we;
  logic [31:0] pea_rf_1_qs;
  logic [31:0] pea_rf_1_wd;
  logic pea_rf_1_we;
  logic [31:0] pea_rf_2_qs;
  logic [31:0] pea_rf_2_wd;
  logic pea_rf_2_we;
  logic [31:0] pea_rf_3_qs;
  logic [31:0] pea_rf_3_wd;
  logic pea_rf_3_we;
  logic [31:0] pea_rf_4_qs;
  logic [31:0] pea_rf_4_wd;
  logic pea_rf_4_we;
  logic [31:0] pea_rf_5_qs;
  logic [31:0] pea_rf_5_wd;
  logic pea_rf_5_we;
  logic [31:0] pea_rf_6_qs;
  logic [31:0] pea_rf_6_wd;
  logic pea_rf_6_we;
  logic [31:0] pea_rf_7_qs;
  logic [31:0] pea_rf_7_wd;
  logic pea_rf_7_we;
  logic [31:0] pea_rf_8_qs;
  logic [31:0] pea_rf_8_wd;
  logic pea_rf_8_we;
  logic [31:0] pea_rf_9_qs;
  logic [31:0] pea_rf_9_wd;
  logic pea_rf_9_we;
  logic [31:0] pea_rf_10_qs;
  logic [31:0] pea_rf_10_wd;
  logic pea_rf_10_we;
  logic [31:0] pea_rf_11_qs;
  logic [31:0] pea_rf_11_wd;
  logic pea_rf_11_we;
  logic [31:0] pea_rf_12_qs;
  logic [31:0] pea_rf_12_wd;
  logic pea_rf_12_we;
  logic [31:0] pea_rf_13_qs;
  logic [31:0] pea_rf_13_wd;
  logic pea_rf_13_we;
  logic [31:0] pea_rf_14_qs;
  logic [31:0] pea_rf_14_wd;
  logic pea_rf_14_we;
  logic [31:0] pea_rf_15_qs;
  logic [31:0] pea_rf_15_wd;
  logic pea_rf_15_we;
  logic [31:0] trans_size_dma_ch_0_qs;
  logic [31:0] trans_size_dma_ch_0_wd;
  logic trans_size_dma_ch_0_we;
  logic [15:0] trans_size_sync_dma_ch_0_qs;
  logic [15:0] trans_size_sync_dma_ch_0_wd;
  logic trans_size_sync_dma_ch_0_we;
  logic [31:0] trans_size_dma_ch_1_qs;
  logic [31:0] trans_size_dma_ch_1_wd;
  logic trans_size_dma_ch_1_we;
  logic [15:0] trans_size_sync_dma_ch_1_qs;
  logic [15:0] trans_size_sync_dma_ch_1_wd;
  logic trans_size_sync_dma_ch_1_we;
  logic [31:0] trans_size_dma_ch_2_qs;
  logic [31:0] trans_size_dma_ch_2_wd;
  logic trans_size_dma_ch_2_we;
  logic [15:0] trans_size_sync_dma_ch_2_qs;
  logic [15:0] trans_size_sync_dma_ch_2_wd;
  logic trans_size_sync_dma_ch_2_we;
  logic [31:0] trans_size_dma_ch_3_qs;
  logic [31:0] trans_size_dma_ch_3_wd;
  logic trans_size_dma_ch_3_we;
  logic [15:0] trans_size_sync_dma_ch_3_qs;
  logic [15:0] trans_size_sync_dma_ch_3_wd;
  logic trans_size_sync_dma_ch_3_we;
  logic [3:0] dma_rnw_qs;
  logic [3:0] dma_rnw_wd;
  logic dma_rnw_we;
  logic [1:0] cols_grouping_qs;
  logic [1:0] cols_grouping_wd;
  logic cols_grouping_we;
  logic sync_dma_ch_qs;
  logic sync_dma_ch_wd;
  logic sync_dma_ch_we;
  logic [3:0] sync_dma_ch_trans_qs;
  logic [3:0] sync_dma_ch_trans_wd;
  logic sync_dma_ch_trans_we;
  logic [1:0] stream_out_xbar_sel_sel_out_xbar_0_qs;
  logic [1:0] stream_out_xbar_sel_sel_out_xbar_0_wd;
  logic stream_out_xbar_sel_sel_out_xbar_0_we;
  logic [1:0] stream_out_xbar_sel_sel_out_xbar_1_qs;
  logic [1:0] stream_out_xbar_sel_sel_out_xbar_1_wd;
  logic stream_out_xbar_sel_sel_out_xbar_1_we;
  logic [1:0] stream_out_xbar_sel_sel_out_xbar_2_qs;
  logic [1:0] stream_out_xbar_sel_sel_out_xbar_2_wd;
  logic stream_out_xbar_sel_sel_out_xbar_2_we;
  logic [1:0] stream_out_xbar_sel_sel_out_xbar_3_qs;
  logic [1:0] stream_out_xbar_sel_sel_out_xbar_3_wd;
  logic stream_out_xbar_sel_sel_out_xbar_3_we;
  logic [3:0] sel_out_col_pea_sel_col_0_0_qs;
  logic [3:0] sel_out_col_pea_sel_col_0_0_wd;
  logic sel_out_col_pea_sel_col_0_0_we;
  logic [3:0] sel_out_col_pea_sel_col_1_0_qs;
  logic [3:0] sel_out_col_pea_sel_col_1_0_wd;
  logic sel_out_col_pea_sel_col_1_0_we;
  logic [3:0] sel_out_col_pea_sel_col_2_0_qs;
  logic [3:0] sel_out_col_pea_sel_col_2_0_wd;
  logic sel_out_col_pea_sel_col_2_0_we;
  logic [3:0] sel_out_col_pea_sel_col_3_0_qs;
  logic [3:0] sel_out_col_pea_sel_col_3_0_wd;
  logic sel_out_col_pea_sel_col_3_0_we;
  logic [15:0] acc_value_0_acc_0_qs;
  logic [15:0] acc_value_0_acc_0_wd;
  logic acc_value_0_acc_0_we;
  logic [15:0] acc_value_0_acc_1_qs;
  logic [15:0] acc_value_0_acc_1_wd;
  logic acc_value_0_acc_1_we;
  logic [15:0] acc_value_1_acc_2_qs;
  logic [15:0] acc_value_1_acc_2_wd;
  logic acc_value_1_acc_2_we;
  logic [15:0] acc_value_1_acc_3_qs;
  logic [15:0] acc_value_1_acc_3_wd;
  logic acc_value_1_acc_3_we;
  logic [15:0] acc_value_2_acc_4_qs;
  logic [15:0] acc_value_2_acc_4_wd;
  logic acc_value_2_acc_4_we;
  logic [15:0] acc_value_2_acc_5_qs;
  logic [15:0] acc_value_2_acc_5_wd;
  logic acc_value_2_acc_5_we;
  logic [15:0] acc_value_3_acc_6_qs;
  logic [15:0] acc_value_3_acc_6_wd;
  logic acc_value_3_acc_6_we;
  logic [15:0] acc_value_3_acc_7_qs;
  logic [15:0] acc_value_3_acc_7_wd;
  logic acc_value_3_acc_7_we;
  logic [15:0] acc_value_4_acc_8_qs;
  logic [15:0] acc_value_4_acc_8_wd;
  logic acc_value_4_acc_8_we;
  logic [15:0] acc_value_4_acc_9_qs;
  logic [15:0] acc_value_4_acc_9_wd;
  logic acc_value_4_acc_9_we;
  logic [15:0] acc_value_5_acc_10_qs;
  logic [15:0] acc_value_5_acc_10_wd;
  logic acc_value_5_acc_10_we;
  logic [15:0] acc_value_5_acc_11_qs;
  logic [15:0] acc_value_5_acc_11_wd;
  logic acc_value_5_acc_11_we;
  logic [15:0] acc_value_6_acc_12_qs;
  logic [15:0] acc_value_6_acc_12_wd;
  logic acc_value_6_acc_12_we;
  logic [15:0] acc_value_6_acc_13_qs;
  logic [15:0] acc_value_6_acc_13_wd;
  logic acc_value_6_acc_13_we;
  logic [15:0] acc_value_7_acc_14_qs;
  logic [15:0] acc_value_7_acc_14_wd;
  logic acc_value_7_acc_14_we;
  logic [15:0] acc_value_7_acc_15_qs;
  logic [15:0] acc_value_7_acc_15_wd;
  logic acc_value_7_acc_15_we;

  // Register instances

  // Subregister 0 of Multireg cfg_pe_00
  // R[cfg_pe_00]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_00 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_00_we),
      .wd(cfg_pe_00_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_00[0].q),

      // to register interface (read)
      .qs(cfg_pe_00_qs)
  );



  // Subregister 0 of Multireg cfg_pe_01
  // R[cfg_pe_01]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_01 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_01_we),
      .wd(cfg_pe_01_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_01[0].q),

      // to register interface (read)
      .qs(cfg_pe_01_qs)
  );



  // Subregister 0 of Multireg cfg_pe_02
  // R[cfg_pe_02]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_02 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_02_we),
      .wd(cfg_pe_02_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_02[0].q),

      // to register interface (read)
      .qs(cfg_pe_02_qs)
  );



  // Subregister 0 of Multireg cfg_pe_03
  // R[cfg_pe_03]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_03 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_03_we),
      .wd(cfg_pe_03_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_03[0].q),

      // to register interface (read)
      .qs(cfg_pe_03_qs)
  );



  // Subregister 0 of Multireg cfg_pe_10
  // R[cfg_pe_10]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_10 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_10_we),
      .wd(cfg_pe_10_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_10[0].q),

      // to register interface (read)
      .qs(cfg_pe_10_qs)
  );



  // Subregister 0 of Multireg cfg_pe_11
  // R[cfg_pe_11]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_11 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_11_we),
      .wd(cfg_pe_11_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_11[0].q),

      // to register interface (read)
      .qs(cfg_pe_11_qs)
  );



  // Subregister 0 of Multireg cfg_pe_12
  // R[cfg_pe_12]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_12 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_12_we),
      .wd(cfg_pe_12_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_12[0].q),

      // to register interface (read)
      .qs(cfg_pe_12_qs)
  );



  // Subregister 0 of Multireg cfg_pe_13
  // R[cfg_pe_13]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_13 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_13_we),
      .wd(cfg_pe_13_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_13[0].q),

      // to register interface (read)
      .qs(cfg_pe_13_qs)
  );



  // Subregister 0 of Multireg cfg_pe_20
  // R[cfg_pe_20]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_20 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_20_we),
      .wd(cfg_pe_20_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_20[0].q),

      // to register interface (read)
      .qs(cfg_pe_20_qs)
  );



  // Subregister 0 of Multireg cfg_pe_21
  // R[cfg_pe_21]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_21 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_21_we),
      .wd(cfg_pe_21_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_21[0].q),

      // to register interface (read)
      .qs(cfg_pe_21_qs)
  );



  // Subregister 0 of Multireg cfg_pe_22
  // R[cfg_pe_22]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_22 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_22_we),
      .wd(cfg_pe_22_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_22[0].q),

      // to register interface (read)
      .qs(cfg_pe_22_qs)
  );



  // Subregister 0 of Multireg cfg_pe_23
  // R[cfg_pe_23]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_23 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_23_we),
      .wd(cfg_pe_23_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_23[0].q),

      // to register interface (read)
      .qs(cfg_pe_23_qs)
  );



  // Subregister 0 of Multireg cfg_pe_30
  // R[cfg_pe_30]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_30 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_30_we),
      .wd(cfg_pe_30_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_30[0].q),

      // to register interface (read)
      .qs(cfg_pe_30_qs)
  );



  // Subregister 0 of Multireg cfg_pe_31
  // R[cfg_pe_31]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_31 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_31_we),
      .wd(cfg_pe_31_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_31[0].q),

      // to register interface (read)
      .qs(cfg_pe_31_qs)
  );



  // Subregister 0 of Multireg cfg_pe_32
  // R[cfg_pe_32]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_32 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_32_we),
      .wd(cfg_pe_32_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_32[0].q),

      // to register interface (read)
      .qs(cfg_pe_32_qs)
  );



  // Subregister 0 of Multireg cfg_pe_33
  // R[cfg_pe_33]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_cfg_pe_33 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cfg_pe_33_we),
      .wd(cfg_pe_33_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cfg_pe_33[0].q),

      // to register interface (read)
      .qs(cfg_pe_33_qs)
  );



  // Subregister 0 of Multireg pea_constants
  // R[pea_constants_0]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_0_we),
      .wd(pea_constants_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[0].q),

      // to register interface (read)
      .qs(pea_constants_0_qs)
  );

  // Subregister 1 of Multireg pea_constants
  // R[pea_constants_1]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_1_we),
      .wd(pea_constants_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[1].q),

      // to register interface (read)
      .qs(pea_constants_1_qs)
  );

  // Subregister 2 of Multireg pea_constants
  // R[pea_constants_2]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_2_we),
      .wd(pea_constants_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[2].q),

      // to register interface (read)
      .qs(pea_constants_2_qs)
  );

  // Subregister 3 of Multireg pea_constants
  // R[pea_constants_3]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_3_we),
      .wd(pea_constants_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[3].q),

      // to register interface (read)
      .qs(pea_constants_3_qs)
  );

  // Subregister 4 of Multireg pea_constants
  // R[pea_constants_4]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_4_we),
      .wd(pea_constants_4_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[4].q),

      // to register interface (read)
      .qs(pea_constants_4_qs)
  );

  // Subregister 5 of Multireg pea_constants
  // R[pea_constants_5]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_5_we),
      .wd(pea_constants_5_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[5].q),

      // to register interface (read)
      .qs(pea_constants_5_qs)
  );

  // Subregister 6 of Multireg pea_constants
  // R[pea_constants_6]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_6_we),
      .wd(pea_constants_6_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[6].q),

      // to register interface (read)
      .qs(pea_constants_6_qs)
  );

  // Subregister 7 of Multireg pea_constants
  // R[pea_constants_7]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_7_we),
      .wd(pea_constants_7_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[7].q),

      // to register interface (read)
      .qs(pea_constants_7_qs)
  );

  // Subregister 8 of Multireg pea_constants
  // R[pea_constants_8]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_8 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_8_we),
      .wd(pea_constants_8_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[8].q),

      // to register interface (read)
      .qs(pea_constants_8_qs)
  );

  // Subregister 9 of Multireg pea_constants
  // R[pea_constants_9]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_9 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_9_we),
      .wd(pea_constants_9_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[9].q),

      // to register interface (read)
      .qs(pea_constants_9_qs)
  );

  // Subregister 10 of Multireg pea_constants
  // R[pea_constants_10]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_10 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_10_we),
      .wd(pea_constants_10_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[10].q),

      // to register interface (read)
      .qs(pea_constants_10_qs)
  );

  // Subregister 11 of Multireg pea_constants
  // R[pea_constants_11]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_11 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_11_we),
      .wd(pea_constants_11_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[11].q),

      // to register interface (read)
      .qs(pea_constants_11_qs)
  );

  // Subregister 12 of Multireg pea_constants
  // R[pea_constants_12]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_12 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_12_we),
      .wd(pea_constants_12_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[12].q),

      // to register interface (read)
      .qs(pea_constants_12_qs)
  );

  // Subregister 13 of Multireg pea_constants
  // R[pea_constants_13]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_13 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_13_we),
      .wd(pea_constants_13_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[13].q),

      // to register interface (read)
      .qs(pea_constants_13_qs)
  );

  // Subregister 14 of Multireg pea_constants
  // R[pea_constants_14]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_14 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_14_we),
      .wd(pea_constants_14_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[14].q),

      // to register interface (read)
      .qs(pea_constants_14_qs)
  );

  // Subregister 15 of Multireg pea_constants
  // R[pea_constants_15]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_constants_15 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_constants_15_we),
      .wd(pea_constants_15_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_constants[15].q),

      // to register interface (read)
      .qs(pea_constants_15_qs)
  );



  // Subregister 0 of Multireg pea_rf
  // R[pea_rf_0]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_0_we),
      .wd(pea_rf_0_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[0].de),
      .d (hw2reg.pea_rf[0].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[0].q),

      // to register interface (read)
      .qs(pea_rf_0_qs)
  );

  // Subregister 1 of Multireg pea_rf
  // R[pea_rf_1]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_1_we),
      .wd(pea_rf_1_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[1].de),
      .d (hw2reg.pea_rf[1].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[1].q),

      // to register interface (read)
      .qs(pea_rf_1_qs)
  );

  // Subregister 2 of Multireg pea_rf
  // R[pea_rf_2]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_2_we),
      .wd(pea_rf_2_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[2].de),
      .d (hw2reg.pea_rf[2].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[2].q),

      // to register interface (read)
      .qs(pea_rf_2_qs)
  );

  // Subregister 3 of Multireg pea_rf
  // R[pea_rf_3]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_3_we),
      .wd(pea_rf_3_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[3].de),
      .d (hw2reg.pea_rf[3].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[3].q),

      // to register interface (read)
      .qs(pea_rf_3_qs)
  );

  // Subregister 4 of Multireg pea_rf
  // R[pea_rf_4]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_4_we),
      .wd(pea_rf_4_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[4].de),
      .d (hw2reg.pea_rf[4].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[4].q),

      // to register interface (read)
      .qs(pea_rf_4_qs)
  );

  // Subregister 5 of Multireg pea_rf
  // R[pea_rf_5]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_5_we),
      .wd(pea_rf_5_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[5].de),
      .d (hw2reg.pea_rf[5].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[5].q),

      // to register interface (read)
      .qs(pea_rf_5_qs)
  );

  // Subregister 6 of Multireg pea_rf
  // R[pea_rf_6]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_6_we),
      .wd(pea_rf_6_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[6].de),
      .d (hw2reg.pea_rf[6].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[6].q),

      // to register interface (read)
      .qs(pea_rf_6_qs)
  );

  // Subregister 7 of Multireg pea_rf
  // R[pea_rf_7]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_7_we),
      .wd(pea_rf_7_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[7].de),
      .d (hw2reg.pea_rf[7].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[7].q),

      // to register interface (read)
      .qs(pea_rf_7_qs)
  );

  // Subregister 8 of Multireg pea_rf
  // R[pea_rf_8]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_8 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_8_we),
      .wd(pea_rf_8_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[8].de),
      .d (hw2reg.pea_rf[8].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[8].q),

      // to register interface (read)
      .qs(pea_rf_8_qs)
  );

  // Subregister 9 of Multireg pea_rf
  // R[pea_rf_9]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_9 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_9_we),
      .wd(pea_rf_9_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[9].de),
      .d (hw2reg.pea_rf[9].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[9].q),

      // to register interface (read)
      .qs(pea_rf_9_qs)
  );

  // Subregister 10 of Multireg pea_rf
  // R[pea_rf_10]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_10 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_10_we),
      .wd(pea_rf_10_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[10].de),
      .d (hw2reg.pea_rf[10].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[10].q),

      // to register interface (read)
      .qs(pea_rf_10_qs)
  );

  // Subregister 11 of Multireg pea_rf
  // R[pea_rf_11]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_11 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_11_we),
      .wd(pea_rf_11_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[11].de),
      .d (hw2reg.pea_rf[11].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[11].q),

      // to register interface (read)
      .qs(pea_rf_11_qs)
  );

  // Subregister 12 of Multireg pea_rf
  // R[pea_rf_12]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_12 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_12_we),
      .wd(pea_rf_12_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[12].de),
      .d (hw2reg.pea_rf[12].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[12].q),

      // to register interface (read)
      .qs(pea_rf_12_qs)
  );

  // Subregister 13 of Multireg pea_rf
  // R[pea_rf_13]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_13 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_13_we),
      .wd(pea_rf_13_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[13].de),
      .d (hw2reg.pea_rf[13].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[13].q),

      // to register interface (read)
      .qs(pea_rf_13_qs)
  );

  // Subregister 14 of Multireg pea_rf
  // R[pea_rf_14]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_14 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_14_we),
      .wd(pea_rf_14_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[14].de),
      .d (hw2reg.pea_rf[14].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[14].q),

      // to register interface (read)
      .qs(pea_rf_14_qs)
  );

  // Subregister 15 of Multireg pea_rf
  // R[pea_rf_15]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_pea_rf_15 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pea_rf_15_we),
      .wd(pea_rf_15_wd),

      // from internal hardware
      .de(hw2reg.pea_rf[15].de),
      .d (hw2reg.pea_rf[15].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.pea_rf[15].q),

      // to register interface (read)
      .qs(pea_rf_15_qs)
  );


  // R[trans_size_dma_ch_0]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_trans_size_dma_ch_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(trans_size_dma_ch_0_we),
      .wd(trans_size_dma_ch_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.trans_size_dma_ch_0.q),

      // to register interface (read)
      .qs(trans_size_dma_ch_0_qs)
  );


  // R[trans_size_sync_dma_ch_0]: V(False)

  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_trans_size_sync_dma_ch_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(trans_size_sync_dma_ch_0_we),
      .wd(trans_size_sync_dma_ch_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.trans_size_sync_dma_ch_0.q),

      // to register interface (read)
      .qs(trans_size_sync_dma_ch_0_qs)
  );


  // R[trans_size_dma_ch_1]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_trans_size_dma_ch_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(trans_size_dma_ch_1_we),
      .wd(trans_size_dma_ch_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.trans_size_dma_ch_1.q),

      // to register interface (read)
      .qs(trans_size_dma_ch_1_qs)
  );


  // R[trans_size_sync_dma_ch_1]: V(False)

  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_trans_size_sync_dma_ch_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(trans_size_sync_dma_ch_1_we),
      .wd(trans_size_sync_dma_ch_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.trans_size_sync_dma_ch_1.q),

      // to register interface (read)
      .qs(trans_size_sync_dma_ch_1_qs)
  );


  // R[trans_size_dma_ch_2]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_trans_size_dma_ch_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(trans_size_dma_ch_2_we),
      .wd(trans_size_dma_ch_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.trans_size_dma_ch_2.q),

      // to register interface (read)
      .qs(trans_size_dma_ch_2_qs)
  );


  // R[trans_size_sync_dma_ch_2]: V(False)

  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_trans_size_sync_dma_ch_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(trans_size_sync_dma_ch_2_we),
      .wd(trans_size_sync_dma_ch_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.trans_size_sync_dma_ch_2.q),

      // to register interface (read)
      .qs(trans_size_sync_dma_ch_2_qs)
  );


  // R[trans_size_dma_ch_3]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_trans_size_dma_ch_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(trans_size_dma_ch_3_we),
      .wd(trans_size_dma_ch_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.trans_size_dma_ch_3.q),

      // to register interface (read)
      .qs(trans_size_dma_ch_3_qs)
  );


  // R[trans_size_sync_dma_ch_3]: V(False)

  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_trans_size_sync_dma_ch_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(trans_size_sync_dma_ch_3_we),
      .wd(trans_size_sync_dma_ch_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.trans_size_sync_dma_ch_3.q),

      // to register interface (read)
      .qs(trans_size_sync_dma_ch_3_qs)
  );


  // R[dma_rnw]: V(False)

  prim_subreg #(
      .DW      (4),
      .SWACCESS("RW"),
      .RESVAL  (4'h0)
  ) u_dma_rnw (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(dma_rnw_we),
      .wd(dma_rnw_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.dma_rnw.q),

      // to register interface (read)
      .qs(dma_rnw_qs)
  );


  // R[cols_grouping]: V(False)

  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h0)
  ) u_cols_grouping (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(cols_grouping_we),
      .wd(cols_grouping_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.cols_grouping.q),

      // to register interface (read)
      .qs(cols_grouping_qs)
  );


  // R[sync_dma_ch]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_sync_dma_ch (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sync_dma_ch_we),
      .wd(sync_dma_ch_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.sync_dma_ch.q),

      // to register interface (read)
      .qs(sync_dma_ch_qs)
  );


  // R[sync_dma_ch_trans]: V(False)

  prim_subreg #(
      .DW      (4),
      .SWACCESS("RW"),
      .RESVAL  (4'h0)
  ) u_sync_dma_ch_trans (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sync_dma_ch_trans_we),
      .wd(sync_dma_ch_trans_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.sync_dma_ch_trans.q),

      // to register interface (read)
      .qs(sync_dma_ch_trans_qs)
  );


  // R[stream_out_xbar_sel]: V(False)

  //   F[sel_out_xbar_0]: 1:0
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h0)
  ) u_stream_out_xbar_sel_sel_out_xbar_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(stream_out_xbar_sel_sel_out_xbar_0_we),
      .wd(stream_out_xbar_sel_sel_out_xbar_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.stream_out_xbar_sel.sel_out_xbar_0.q),

      // to register interface (read)
      .qs(stream_out_xbar_sel_sel_out_xbar_0_qs)
  );


  //   F[sel_out_xbar_1]: 3:2
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h0)
  ) u_stream_out_xbar_sel_sel_out_xbar_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(stream_out_xbar_sel_sel_out_xbar_1_we),
      .wd(stream_out_xbar_sel_sel_out_xbar_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.stream_out_xbar_sel.sel_out_xbar_1.q),

      // to register interface (read)
      .qs(stream_out_xbar_sel_sel_out_xbar_1_qs)
  );


  //   F[sel_out_xbar_2]: 5:4
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h0)
  ) u_stream_out_xbar_sel_sel_out_xbar_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(stream_out_xbar_sel_sel_out_xbar_2_we),
      .wd(stream_out_xbar_sel_sel_out_xbar_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.stream_out_xbar_sel.sel_out_xbar_2.q),

      // to register interface (read)
      .qs(stream_out_xbar_sel_sel_out_xbar_2_qs)
  );


  //   F[sel_out_xbar_3]: 7:6
  prim_subreg #(
      .DW      (2),
      .SWACCESS("RW"),
      .RESVAL  (2'h0)
  ) u_stream_out_xbar_sel_sel_out_xbar_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(stream_out_xbar_sel_sel_out_xbar_3_we),
      .wd(stream_out_xbar_sel_sel_out_xbar_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.stream_out_xbar_sel.sel_out_xbar_3.q),

      // to register interface (read)
      .qs(stream_out_xbar_sel_sel_out_xbar_3_qs)
  );



  // Subregister 0 of Multireg sel_out_col_pea
  // R[sel_out_col_pea]: V(False)

  // F[sel_col_0_0]: 3:0
  prim_subreg #(
      .DW      (4),
      .SWACCESS("RW"),
      .RESVAL  (4'h0)
  ) u_sel_out_col_pea_sel_col_0_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sel_out_col_pea_sel_col_0_0_we),
      .wd(sel_out_col_pea_sel_col_0_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.sel_out_col_pea[0].sel_col_0.q),

      // to register interface (read)
      .qs(sel_out_col_pea_sel_col_0_0_qs)
  );


  // F[sel_col_1_0]: 7:4
  prim_subreg #(
      .DW      (4),
      .SWACCESS("RW"),
      .RESVAL  (4'h0)
  ) u_sel_out_col_pea_sel_col_1_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sel_out_col_pea_sel_col_1_0_we),
      .wd(sel_out_col_pea_sel_col_1_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.sel_out_col_pea[0].sel_col_1.q),

      // to register interface (read)
      .qs(sel_out_col_pea_sel_col_1_0_qs)
  );


  // F[sel_col_2_0]: 11:8
  prim_subreg #(
      .DW      (4),
      .SWACCESS("RW"),
      .RESVAL  (4'h0)
  ) u_sel_out_col_pea_sel_col_2_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sel_out_col_pea_sel_col_2_0_we),
      .wd(sel_out_col_pea_sel_col_2_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.sel_out_col_pea[0].sel_col_2.q),

      // to register interface (read)
      .qs(sel_out_col_pea_sel_col_2_0_qs)
  );


  // F[sel_col_3_0]: 15:12
  prim_subreg #(
      .DW      (4),
      .SWACCESS("RW"),
      .RESVAL  (4'h0)
  ) u_sel_out_col_pea_sel_col_3_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sel_out_col_pea_sel_col_3_0_we),
      .wd(sel_out_col_pea_sel_col_3_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.sel_out_col_pea[0].sel_col_3.q),

      // to register interface (read)
      .qs(sel_out_col_pea_sel_col_3_0_qs)
  );




  // Subregister 0 of Multireg acc_value
  // R[acc_value_0]: V(False)

  // F[acc_0]: 15:0
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_0_acc_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_0_acc_0_we),
      .wd(acc_value_0_acc_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[0].q),

      // to register interface (read)
      .qs(acc_value_0_acc_0_qs)
  );


  // F[acc_1]: 31:16
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_0_acc_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_0_acc_1_we),
      .wd(acc_value_0_acc_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[1].q),

      // to register interface (read)
      .qs(acc_value_0_acc_1_qs)
  );


  // Subregister 2 of Multireg acc_value
  // R[acc_value_1]: V(False)

  // F[acc_2]: 15:0
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_1_acc_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_1_acc_2_we),
      .wd(acc_value_1_acc_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[2].q),

      // to register interface (read)
      .qs(acc_value_1_acc_2_qs)
  );


  // F[acc_3]: 31:16
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_1_acc_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_1_acc_3_we),
      .wd(acc_value_1_acc_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[3].q),

      // to register interface (read)
      .qs(acc_value_1_acc_3_qs)
  );


  // Subregister 4 of Multireg acc_value
  // R[acc_value_2]: V(False)

  // F[acc_4]: 15:0
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_2_acc_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_2_acc_4_we),
      .wd(acc_value_2_acc_4_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[4].q),

      // to register interface (read)
      .qs(acc_value_2_acc_4_qs)
  );


  // F[acc_5]: 31:16
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_2_acc_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_2_acc_5_we),
      .wd(acc_value_2_acc_5_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[5].q),

      // to register interface (read)
      .qs(acc_value_2_acc_5_qs)
  );


  // Subregister 6 of Multireg acc_value
  // R[acc_value_3]: V(False)

  // F[acc_6]: 15:0
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_3_acc_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_3_acc_6_we),
      .wd(acc_value_3_acc_6_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[6].q),

      // to register interface (read)
      .qs(acc_value_3_acc_6_qs)
  );


  // F[acc_7]: 31:16
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_3_acc_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_3_acc_7_we),
      .wd(acc_value_3_acc_7_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[7].q),

      // to register interface (read)
      .qs(acc_value_3_acc_7_qs)
  );


  // Subregister 8 of Multireg acc_value
  // R[acc_value_4]: V(False)

  // F[acc_8]: 15:0
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_4_acc_8 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_4_acc_8_we),
      .wd(acc_value_4_acc_8_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[8].q),

      // to register interface (read)
      .qs(acc_value_4_acc_8_qs)
  );


  // F[acc_9]: 31:16
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_4_acc_9 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_4_acc_9_we),
      .wd(acc_value_4_acc_9_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[9].q),

      // to register interface (read)
      .qs(acc_value_4_acc_9_qs)
  );


  // Subregister 10 of Multireg acc_value
  // R[acc_value_5]: V(False)

  // F[acc_10]: 15:0
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_5_acc_10 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_5_acc_10_we),
      .wd(acc_value_5_acc_10_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[10].q),

      // to register interface (read)
      .qs(acc_value_5_acc_10_qs)
  );


  // F[acc_11]: 31:16
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_5_acc_11 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_5_acc_11_we),
      .wd(acc_value_5_acc_11_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[11].q),

      // to register interface (read)
      .qs(acc_value_5_acc_11_qs)
  );


  // Subregister 12 of Multireg acc_value
  // R[acc_value_6]: V(False)

  // F[acc_12]: 15:0
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_6_acc_12 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_6_acc_12_we),
      .wd(acc_value_6_acc_12_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[12].q),

      // to register interface (read)
      .qs(acc_value_6_acc_12_qs)
  );


  // F[acc_13]: 31:16
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_6_acc_13 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_6_acc_13_we),
      .wd(acc_value_6_acc_13_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[13].q),

      // to register interface (read)
      .qs(acc_value_6_acc_13_qs)
  );


  // Subregister 14 of Multireg acc_value
  // R[acc_value_7]: V(False)

  // F[acc_14]: 15:0
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_7_acc_14 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_7_acc_14_we),
      .wd(acc_value_7_acc_14_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[14].q),

      // to register interface (read)
      .qs(acc_value_7_acc_14_qs)
  );


  // F[acc_15]: 31:16
  prim_subreg #(
      .DW      (16),
      .SWACCESS("RW"),
      .RESVAL  (16'h0)
  ) u_acc_value_7_acc_15 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(acc_value_7_acc_15_we),
      .wd(acc_value_7_acc_15_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.acc_value[15].q),

      // to register interface (read)
      .qs(acc_value_7_acc_15_qs)
  );





  logic [69:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == MAGE_CFG_PE_00_OFFSET);
    addr_hit[1] = (reg_addr == MAGE_CFG_PE_01_OFFSET);
    addr_hit[2] = (reg_addr == MAGE_CFG_PE_02_OFFSET);
    addr_hit[3] = (reg_addr == MAGE_CFG_PE_03_OFFSET);
    addr_hit[4] = (reg_addr == MAGE_CFG_PE_10_OFFSET);
    addr_hit[5] = (reg_addr == MAGE_CFG_PE_11_OFFSET);
    addr_hit[6] = (reg_addr == MAGE_CFG_PE_12_OFFSET);
    addr_hit[7] = (reg_addr == MAGE_CFG_PE_13_OFFSET);
    addr_hit[8] = (reg_addr == MAGE_CFG_PE_20_OFFSET);
    addr_hit[9] = (reg_addr == MAGE_CFG_PE_21_OFFSET);
    addr_hit[10] = (reg_addr == MAGE_CFG_PE_22_OFFSET);
    addr_hit[11] = (reg_addr == MAGE_CFG_PE_23_OFFSET);
    addr_hit[12] = (reg_addr == MAGE_CFG_PE_30_OFFSET);
    addr_hit[13] = (reg_addr == MAGE_CFG_PE_31_OFFSET);
    addr_hit[14] = (reg_addr == MAGE_CFG_PE_32_OFFSET);
    addr_hit[15] = (reg_addr == MAGE_CFG_PE_33_OFFSET);
    addr_hit[16] = (reg_addr == MAGE_PEA_CONSTANTS_0_OFFSET);
    addr_hit[17] = (reg_addr == MAGE_PEA_CONSTANTS_1_OFFSET);
    addr_hit[18] = (reg_addr == MAGE_PEA_CONSTANTS_2_OFFSET);
    addr_hit[19] = (reg_addr == MAGE_PEA_CONSTANTS_3_OFFSET);
    addr_hit[20] = (reg_addr == MAGE_PEA_CONSTANTS_4_OFFSET);
    addr_hit[21] = (reg_addr == MAGE_PEA_CONSTANTS_5_OFFSET);
    addr_hit[22] = (reg_addr == MAGE_PEA_CONSTANTS_6_OFFSET);
    addr_hit[23] = (reg_addr == MAGE_PEA_CONSTANTS_7_OFFSET);
    addr_hit[24] = (reg_addr == MAGE_PEA_CONSTANTS_8_OFFSET);
    addr_hit[25] = (reg_addr == MAGE_PEA_CONSTANTS_9_OFFSET);
    addr_hit[26] = (reg_addr == MAGE_PEA_CONSTANTS_10_OFFSET);
    addr_hit[27] = (reg_addr == MAGE_PEA_CONSTANTS_11_OFFSET);
    addr_hit[28] = (reg_addr == MAGE_PEA_CONSTANTS_12_OFFSET);
    addr_hit[29] = (reg_addr == MAGE_PEA_CONSTANTS_13_OFFSET);
    addr_hit[30] = (reg_addr == MAGE_PEA_CONSTANTS_14_OFFSET);
    addr_hit[31] = (reg_addr == MAGE_PEA_CONSTANTS_15_OFFSET);
    addr_hit[32] = (reg_addr == MAGE_PEA_RF_0_OFFSET);
    addr_hit[33] = (reg_addr == MAGE_PEA_RF_1_OFFSET);
    addr_hit[34] = (reg_addr == MAGE_PEA_RF_2_OFFSET);
    addr_hit[35] = (reg_addr == MAGE_PEA_RF_3_OFFSET);
    addr_hit[36] = (reg_addr == MAGE_PEA_RF_4_OFFSET);
    addr_hit[37] = (reg_addr == MAGE_PEA_RF_5_OFFSET);
    addr_hit[38] = (reg_addr == MAGE_PEA_RF_6_OFFSET);
    addr_hit[39] = (reg_addr == MAGE_PEA_RF_7_OFFSET);
    addr_hit[40] = (reg_addr == MAGE_PEA_RF_8_OFFSET);
    addr_hit[41] = (reg_addr == MAGE_PEA_RF_9_OFFSET);
    addr_hit[42] = (reg_addr == MAGE_PEA_RF_10_OFFSET);
    addr_hit[43] = (reg_addr == MAGE_PEA_RF_11_OFFSET);
    addr_hit[44] = (reg_addr == MAGE_PEA_RF_12_OFFSET);
    addr_hit[45] = (reg_addr == MAGE_PEA_RF_13_OFFSET);
    addr_hit[46] = (reg_addr == MAGE_PEA_RF_14_OFFSET);
    addr_hit[47] = (reg_addr == MAGE_PEA_RF_15_OFFSET);
    addr_hit[48] = (reg_addr == MAGE_TRANS_SIZE_DMA_CH_0_OFFSET);
    addr_hit[49] = (reg_addr == MAGE_TRANS_SIZE_SYNC_DMA_CH_0_OFFSET);
    addr_hit[50] = (reg_addr == MAGE_TRANS_SIZE_DMA_CH_1_OFFSET);
    addr_hit[51] = (reg_addr == MAGE_TRANS_SIZE_SYNC_DMA_CH_1_OFFSET);
    addr_hit[52] = (reg_addr == MAGE_TRANS_SIZE_DMA_CH_2_OFFSET);
    addr_hit[53] = (reg_addr == MAGE_TRANS_SIZE_SYNC_DMA_CH_2_OFFSET);
    addr_hit[54] = (reg_addr == MAGE_TRANS_SIZE_DMA_CH_3_OFFSET);
    addr_hit[55] = (reg_addr == MAGE_TRANS_SIZE_SYNC_DMA_CH_3_OFFSET);
    addr_hit[56] = (reg_addr == MAGE_DMA_RNW_OFFSET);
    addr_hit[57] = (reg_addr == MAGE_COLS_GROUPING_OFFSET);
    addr_hit[58] = (reg_addr == MAGE_SYNC_DMA_CH_OFFSET);
    addr_hit[59] = (reg_addr == MAGE_SYNC_DMA_CH_TRANS_OFFSET);
    addr_hit[60] = (reg_addr == MAGE_STREAM_OUT_XBAR_SEL_OFFSET);
    addr_hit[61] = (reg_addr == MAGE_SEL_OUT_COL_PEA_OFFSET);
    addr_hit[62] = (reg_addr == MAGE_ACC_VALUE_0_OFFSET);
    addr_hit[63] = (reg_addr == MAGE_ACC_VALUE_1_OFFSET);
    addr_hit[64] = (reg_addr == MAGE_ACC_VALUE_2_OFFSET);
    addr_hit[65] = (reg_addr == MAGE_ACC_VALUE_3_OFFSET);
    addr_hit[66] = (reg_addr == MAGE_ACC_VALUE_4_OFFSET);
    addr_hit[67] = (reg_addr == MAGE_ACC_VALUE_5_OFFSET);
    addr_hit[68] = (reg_addr == MAGE_ACC_VALUE_6_OFFSET);
    addr_hit[69] = (reg_addr == MAGE_ACC_VALUE_7_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(MAGE_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(MAGE_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(MAGE_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(MAGE_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(MAGE_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(MAGE_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(MAGE_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(MAGE_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(MAGE_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(MAGE_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(MAGE_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(MAGE_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(MAGE_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(MAGE_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(MAGE_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(MAGE_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(MAGE_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(MAGE_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(MAGE_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(MAGE_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(MAGE_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(MAGE_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(MAGE_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(MAGE_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(MAGE_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(MAGE_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(MAGE_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(MAGE_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(MAGE_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(MAGE_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(MAGE_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(MAGE_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(MAGE_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(MAGE_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(MAGE_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(MAGE_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(MAGE_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(MAGE_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(MAGE_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(MAGE_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(MAGE_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(MAGE_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(MAGE_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(MAGE_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(MAGE_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(MAGE_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(MAGE_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(MAGE_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(MAGE_PERMIT[48] & ~reg_be))) |
               (addr_hit[49] & (|(MAGE_PERMIT[49] & ~reg_be))) |
               (addr_hit[50] & (|(MAGE_PERMIT[50] & ~reg_be))) |
               (addr_hit[51] & (|(MAGE_PERMIT[51] & ~reg_be))) |
               (addr_hit[52] & (|(MAGE_PERMIT[52] & ~reg_be))) |
               (addr_hit[53] & (|(MAGE_PERMIT[53] & ~reg_be))) |
               (addr_hit[54] & (|(MAGE_PERMIT[54] & ~reg_be))) |
               (addr_hit[55] & (|(MAGE_PERMIT[55] & ~reg_be))) |
               (addr_hit[56] & (|(MAGE_PERMIT[56] & ~reg_be))) |
               (addr_hit[57] & (|(MAGE_PERMIT[57] & ~reg_be))) |
               (addr_hit[58] & (|(MAGE_PERMIT[58] & ~reg_be))) |
               (addr_hit[59] & (|(MAGE_PERMIT[59] & ~reg_be))) |
               (addr_hit[60] & (|(MAGE_PERMIT[60] & ~reg_be))) |
               (addr_hit[61] & (|(MAGE_PERMIT[61] & ~reg_be))) |
               (addr_hit[62] & (|(MAGE_PERMIT[62] & ~reg_be))) |
               (addr_hit[63] & (|(MAGE_PERMIT[63] & ~reg_be))) |
               (addr_hit[64] & (|(MAGE_PERMIT[64] & ~reg_be))) |
               (addr_hit[65] & (|(MAGE_PERMIT[65] & ~reg_be))) |
               (addr_hit[66] & (|(MAGE_PERMIT[66] & ~reg_be))) |
               (addr_hit[67] & (|(MAGE_PERMIT[67] & ~reg_be))) |
               (addr_hit[68] & (|(MAGE_PERMIT[68] & ~reg_be))) |
               (addr_hit[69] & (|(MAGE_PERMIT[69] & ~reg_be)))));
  end

  assign cfg_pe_00_we = addr_hit[0] & reg_we & !reg_error;
  assign cfg_pe_00_wd = reg_wdata[31:0];

  assign cfg_pe_01_we = addr_hit[1] & reg_we & !reg_error;
  assign cfg_pe_01_wd = reg_wdata[31:0];

  assign cfg_pe_02_we = addr_hit[2] & reg_we & !reg_error;
  assign cfg_pe_02_wd = reg_wdata[31:0];

  assign cfg_pe_03_we = addr_hit[3] & reg_we & !reg_error;
  assign cfg_pe_03_wd = reg_wdata[31:0];

  assign cfg_pe_10_we = addr_hit[4] & reg_we & !reg_error;
  assign cfg_pe_10_wd = reg_wdata[31:0];

  assign cfg_pe_11_we = addr_hit[5] & reg_we & !reg_error;
  assign cfg_pe_11_wd = reg_wdata[31:0];

  assign cfg_pe_12_we = addr_hit[6] & reg_we & !reg_error;
  assign cfg_pe_12_wd = reg_wdata[31:0];

  assign cfg_pe_13_we = addr_hit[7] & reg_we & !reg_error;
  assign cfg_pe_13_wd = reg_wdata[31:0];

  assign cfg_pe_20_we = addr_hit[8] & reg_we & !reg_error;
  assign cfg_pe_20_wd = reg_wdata[31:0];

  assign cfg_pe_21_we = addr_hit[9] & reg_we & !reg_error;
  assign cfg_pe_21_wd = reg_wdata[31:0];

  assign cfg_pe_22_we = addr_hit[10] & reg_we & !reg_error;
  assign cfg_pe_22_wd = reg_wdata[31:0];

  assign cfg_pe_23_we = addr_hit[11] & reg_we & !reg_error;
  assign cfg_pe_23_wd = reg_wdata[31:0];

  assign cfg_pe_30_we = addr_hit[12] & reg_we & !reg_error;
  assign cfg_pe_30_wd = reg_wdata[31:0];

  assign cfg_pe_31_we = addr_hit[13] & reg_we & !reg_error;
  assign cfg_pe_31_wd = reg_wdata[31:0];

  assign cfg_pe_32_we = addr_hit[14] & reg_we & !reg_error;
  assign cfg_pe_32_wd = reg_wdata[31:0];

  assign cfg_pe_33_we = addr_hit[15] & reg_we & !reg_error;
  assign cfg_pe_33_wd = reg_wdata[31:0];

  assign pea_constants_0_we = addr_hit[16] & reg_we & !reg_error;
  assign pea_constants_0_wd = reg_wdata[31:0];

  assign pea_constants_1_we = addr_hit[17] & reg_we & !reg_error;
  assign pea_constants_1_wd = reg_wdata[31:0];

  assign pea_constants_2_we = addr_hit[18] & reg_we & !reg_error;
  assign pea_constants_2_wd = reg_wdata[31:0];

  assign pea_constants_3_we = addr_hit[19] & reg_we & !reg_error;
  assign pea_constants_3_wd = reg_wdata[31:0];

  assign pea_constants_4_we = addr_hit[20] & reg_we & !reg_error;
  assign pea_constants_4_wd = reg_wdata[31:0];

  assign pea_constants_5_we = addr_hit[21] & reg_we & !reg_error;
  assign pea_constants_5_wd = reg_wdata[31:0];

  assign pea_constants_6_we = addr_hit[22] & reg_we & !reg_error;
  assign pea_constants_6_wd = reg_wdata[31:0];

  assign pea_constants_7_we = addr_hit[23] & reg_we & !reg_error;
  assign pea_constants_7_wd = reg_wdata[31:0];

  assign pea_constants_8_we = addr_hit[24] & reg_we & !reg_error;
  assign pea_constants_8_wd = reg_wdata[31:0];

  assign pea_constants_9_we = addr_hit[25] & reg_we & !reg_error;
  assign pea_constants_9_wd = reg_wdata[31:0];

  assign pea_constants_10_we = addr_hit[26] & reg_we & !reg_error;
  assign pea_constants_10_wd = reg_wdata[31:0];

  assign pea_constants_11_we = addr_hit[27] & reg_we & !reg_error;
  assign pea_constants_11_wd = reg_wdata[31:0];

  assign pea_constants_12_we = addr_hit[28] & reg_we & !reg_error;
  assign pea_constants_12_wd = reg_wdata[31:0];

  assign pea_constants_13_we = addr_hit[29] & reg_we & !reg_error;
  assign pea_constants_13_wd = reg_wdata[31:0];

  assign pea_constants_14_we = addr_hit[30] & reg_we & !reg_error;
  assign pea_constants_14_wd = reg_wdata[31:0];

  assign pea_constants_15_we = addr_hit[31] & reg_we & !reg_error;
  assign pea_constants_15_wd = reg_wdata[31:0];

  assign pea_rf_0_we = addr_hit[32] & reg_we & !reg_error;
  assign pea_rf_0_wd = reg_wdata[31:0];

  assign pea_rf_1_we = addr_hit[33] & reg_we & !reg_error;
  assign pea_rf_1_wd = reg_wdata[31:0];

  assign pea_rf_2_we = addr_hit[34] & reg_we & !reg_error;
  assign pea_rf_2_wd = reg_wdata[31:0];

  assign pea_rf_3_we = addr_hit[35] & reg_we & !reg_error;
  assign pea_rf_3_wd = reg_wdata[31:0];

  assign pea_rf_4_we = addr_hit[36] & reg_we & !reg_error;
  assign pea_rf_4_wd = reg_wdata[31:0];

  assign pea_rf_5_we = addr_hit[37] & reg_we & !reg_error;
  assign pea_rf_5_wd = reg_wdata[31:0];

  assign pea_rf_6_we = addr_hit[38] & reg_we & !reg_error;
  assign pea_rf_6_wd = reg_wdata[31:0];

  assign pea_rf_7_we = addr_hit[39] & reg_we & !reg_error;
  assign pea_rf_7_wd = reg_wdata[31:0];

  assign pea_rf_8_we = addr_hit[40] & reg_we & !reg_error;
  assign pea_rf_8_wd = reg_wdata[31:0];

  assign pea_rf_9_we = addr_hit[41] & reg_we & !reg_error;
  assign pea_rf_9_wd = reg_wdata[31:0];

  assign pea_rf_10_we = addr_hit[42] & reg_we & !reg_error;
  assign pea_rf_10_wd = reg_wdata[31:0];

  assign pea_rf_11_we = addr_hit[43] & reg_we & !reg_error;
  assign pea_rf_11_wd = reg_wdata[31:0];

  assign pea_rf_12_we = addr_hit[44] & reg_we & !reg_error;
  assign pea_rf_12_wd = reg_wdata[31:0];

  assign pea_rf_13_we = addr_hit[45] & reg_we & !reg_error;
  assign pea_rf_13_wd = reg_wdata[31:0];

  assign pea_rf_14_we = addr_hit[46] & reg_we & !reg_error;
  assign pea_rf_14_wd = reg_wdata[31:0];

  assign pea_rf_15_we = addr_hit[47] & reg_we & !reg_error;
  assign pea_rf_15_wd = reg_wdata[31:0];

  assign trans_size_dma_ch_0_we = addr_hit[48] & reg_we & !reg_error;
  assign trans_size_dma_ch_0_wd = reg_wdata[31:0];

  assign trans_size_sync_dma_ch_0_we = addr_hit[49] & reg_we & !reg_error;
  assign trans_size_sync_dma_ch_0_wd = reg_wdata[15:0];

  assign trans_size_dma_ch_1_we = addr_hit[50] & reg_we & !reg_error;
  assign trans_size_dma_ch_1_wd = reg_wdata[31:0];

  assign trans_size_sync_dma_ch_1_we = addr_hit[51] & reg_we & !reg_error;
  assign trans_size_sync_dma_ch_1_wd = reg_wdata[15:0];

  assign trans_size_dma_ch_2_we = addr_hit[52] & reg_we & !reg_error;
  assign trans_size_dma_ch_2_wd = reg_wdata[31:0];

  assign trans_size_sync_dma_ch_2_we = addr_hit[53] & reg_we & !reg_error;
  assign trans_size_sync_dma_ch_2_wd = reg_wdata[15:0];

  assign trans_size_dma_ch_3_we = addr_hit[54] & reg_we & !reg_error;
  assign trans_size_dma_ch_3_wd = reg_wdata[31:0];

  assign trans_size_sync_dma_ch_3_we = addr_hit[55] & reg_we & !reg_error;
  assign trans_size_sync_dma_ch_3_wd = reg_wdata[15:0];

  assign dma_rnw_we = addr_hit[56] & reg_we & !reg_error;
  assign dma_rnw_wd = reg_wdata[3:0];

  assign cols_grouping_we = addr_hit[57] & reg_we & !reg_error;
  assign cols_grouping_wd = reg_wdata[1:0];

  assign sync_dma_ch_we = addr_hit[58] & reg_we & !reg_error;
  assign sync_dma_ch_wd = reg_wdata[0];

  assign sync_dma_ch_trans_we = addr_hit[59] & reg_we & !reg_error;
  assign sync_dma_ch_trans_wd = reg_wdata[3:0];

  assign stream_out_xbar_sel_sel_out_xbar_0_we = addr_hit[60] & reg_we & !reg_error;
  assign stream_out_xbar_sel_sel_out_xbar_0_wd = reg_wdata[1:0];

  assign stream_out_xbar_sel_sel_out_xbar_1_we = addr_hit[60] & reg_we & !reg_error;
  assign stream_out_xbar_sel_sel_out_xbar_1_wd = reg_wdata[3:2];

  assign stream_out_xbar_sel_sel_out_xbar_2_we = addr_hit[60] & reg_we & !reg_error;
  assign stream_out_xbar_sel_sel_out_xbar_2_wd = reg_wdata[5:4];

  assign stream_out_xbar_sel_sel_out_xbar_3_we = addr_hit[60] & reg_we & !reg_error;
  assign stream_out_xbar_sel_sel_out_xbar_3_wd = reg_wdata[7:6];

  assign sel_out_col_pea_sel_col_0_0_we = addr_hit[61] & reg_we & !reg_error;
  assign sel_out_col_pea_sel_col_0_0_wd = reg_wdata[3:0];

  assign sel_out_col_pea_sel_col_1_0_we = addr_hit[61] & reg_we & !reg_error;
  assign sel_out_col_pea_sel_col_1_0_wd = reg_wdata[7:4];

  assign sel_out_col_pea_sel_col_2_0_we = addr_hit[61] & reg_we & !reg_error;
  assign sel_out_col_pea_sel_col_2_0_wd = reg_wdata[11:8];

  assign sel_out_col_pea_sel_col_3_0_we = addr_hit[61] & reg_we & !reg_error;
  assign sel_out_col_pea_sel_col_3_0_wd = reg_wdata[15:12];

  assign acc_value_0_acc_0_we = addr_hit[62] & reg_we & !reg_error;
  assign acc_value_0_acc_0_wd = reg_wdata[15:0];

  assign acc_value_0_acc_1_we = addr_hit[62] & reg_we & !reg_error;
  assign acc_value_0_acc_1_wd = reg_wdata[31:16];

  assign acc_value_1_acc_2_we = addr_hit[63] & reg_we & !reg_error;
  assign acc_value_1_acc_2_wd = reg_wdata[15:0];

  assign acc_value_1_acc_3_we = addr_hit[63] & reg_we & !reg_error;
  assign acc_value_1_acc_3_wd = reg_wdata[31:16];

  assign acc_value_2_acc_4_we = addr_hit[64] & reg_we & !reg_error;
  assign acc_value_2_acc_4_wd = reg_wdata[15:0];

  assign acc_value_2_acc_5_we = addr_hit[64] & reg_we & !reg_error;
  assign acc_value_2_acc_5_wd = reg_wdata[31:16];

  assign acc_value_3_acc_6_we = addr_hit[65] & reg_we & !reg_error;
  assign acc_value_3_acc_6_wd = reg_wdata[15:0];

  assign acc_value_3_acc_7_we = addr_hit[65] & reg_we & !reg_error;
  assign acc_value_3_acc_7_wd = reg_wdata[31:16];

  assign acc_value_4_acc_8_we = addr_hit[66] & reg_we & !reg_error;
  assign acc_value_4_acc_8_wd = reg_wdata[15:0];

  assign acc_value_4_acc_9_we = addr_hit[66] & reg_we & !reg_error;
  assign acc_value_4_acc_9_wd = reg_wdata[31:16];

  assign acc_value_5_acc_10_we = addr_hit[67] & reg_we & !reg_error;
  assign acc_value_5_acc_10_wd = reg_wdata[15:0];

  assign acc_value_5_acc_11_we = addr_hit[67] & reg_we & !reg_error;
  assign acc_value_5_acc_11_wd = reg_wdata[31:16];

  assign acc_value_6_acc_12_we = addr_hit[68] & reg_we & !reg_error;
  assign acc_value_6_acc_12_wd = reg_wdata[15:0];

  assign acc_value_6_acc_13_we = addr_hit[68] & reg_we & !reg_error;
  assign acc_value_6_acc_13_wd = reg_wdata[31:16];

  assign acc_value_7_acc_14_we = addr_hit[69] & reg_we & !reg_error;
  assign acc_value_7_acc_14_wd = reg_wdata[15:0];

  assign acc_value_7_acc_15_we = addr_hit[69] & reg_we & !reg_error;
  assign acc_value_7_acc_15_wd = reg_wdata[31:16];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = cfg_pe_00_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = cfg_pe_01_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = cfg_pe_02_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = cfg_pe_03_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = cfg_pe_10_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = cfg_pe_11_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = cfg_pe_12_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = cfg_pe_13_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = cfg_pe_20_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = cfg_pe_21_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = cfg_pe_22_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = cfg_pe_23_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = cfg_pe_30_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = cfg_pe_31_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = cfg_pe_32_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = cfg_pe_33_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = pea_constants_0_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = pea_constants_1_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = pea_constants_2_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = pea_constants_3_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = pea_constants_4_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = pea_constants_5_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = pea_constants_6_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = pea_constants_7_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = pea_constants_8_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = pea_constants_9_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = pea_constants_10_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = pea_constants_11_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = pea_constants_12_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = pea_constants_13_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = pea_constants_14_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = pea_constants_15_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = pea_rf_0_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = pea_rf_1_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = pea_rf_2_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = pea_rf_3_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = pea_rf_4_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = pea_rf_5_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[31:0] = pea_rf_6_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = pea_rf_7_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = pea_rf_8_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = pea_rf_9_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[31:0] = pea_rf_10_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[31:0] = pea_rf_11_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[31:0] = pea_rf_12_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[31:0] = pea_rf_13_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[31:0] = pea_rf_14_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[31:0] = pea_rf_15_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[31:0] = trans_size_dma_ch_0_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[15:0] = trans_size_sync_dma_ch_0_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[31:0] = trans_size_dma_ch_1_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[15:0] = trans_size_sync_dma_ch_1_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[31:0] = trans_size_dma_ch_2_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[15:0] = trans_size_sync_dma_ch_2_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[31:0] = trans_size_dma_ch_3_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[15:0] = trans_size_sync_dma_ch_3_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[3:0] = dma_rnw_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[1:0] = cols_grouping_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[0] = sync_dma_ch_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[3:0] = sync_dma_ch_trans_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[1:0] = stream_out_xbar_sel_sel_out_xbar_0_qs;
        reg_rdata_next[3:2] = stream_out_xbar_sel_sel_out_xbar_1_qs;
        reg_rdata_next[5:4] = stream_out_xbar_sel_sel_out_xbar_2_qs;
        reg_rdata_next[7:6] = stream_out_xbar_sel_sel_out_xbar_3_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[3:0]   = sel_out_col_pea_sel_col_0_0_qs;
        reg_rdata_next[7:4]   = sel_out_col_pea_sel_col_1_0_qs;
        reg_rdata_next[11:8]  = sel_out_col_pea_sel_col_2_0_qs;
        reg_rdata_next[15:12] = sel_out_col_pea_sel_col_3_0_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[15:0]  = acc_value_0_acc_0_qs;
        reg_rdata_next[31:16] = acc_value_0_acc_1_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[15:0]  = acc_value_1_acc_2_qs;
        reg_rdata_next[31:16] = acc_value_1_acc_3_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[15:0]  = acc_value_2_acc_4_qs;
        reg_rdata_next[31:16] = acc_value_2_acc_5_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[15:0]  = acc_value_3_acc_6_qs;
        reg_rdata_next[31:16] = acc_value_3_acc_7_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[15:0]  = acc_value_4_acc_8_qs;
        reg_rdata_next[31:16] = acc_value_4_acc_9_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[15:0]  = acc_value_5_acc_10_qs;
        reg_rdata_next[31:16] = acc_value_5_acc_11_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[15:0]  = acc_value_6_acc_12_qs;
        reg_rdata_next[31:16] = acc_value_6_acc_13_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[15:0]  = acc_value_7_acc_14_qs;
        reg_rdata_next[31:16] = acc_value_7_acc_15_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module mage_reg_top_intf #(
    parameter  int AW = 9,
    localparam int DW = 32
) (
    input logic clk_i,
    input logic rst_ni,
    REG_BUS.in regbus_slave,
    // To HW
    output mage_reg_pkg::mage_reg2hw_t reg2hw,  // Write
    input mage_reg_pkg::mage_hw2reg_t hw2reg,  // Read
    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);
  localparam int unsigned STRB_WIDTH = DW / 8;

  `include "register_interface/typedef.svh"
  `include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;

  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)



  mage_reg_top #(
      .reg_req_t(reg_bus_req_t),
      .reg_rsp_t(reg_bus_rsp_t),
      .AW(AW)
  ) i_regs (
      .clk_i,
      .rst_ni,
      .reg_req_i(s_reg_req),
      .reg_rsp_o(s_reg_rsp),
      .reg2hw,  // Write
      .hw2reg,  // Read
      .devmode_i
  );

endmodule


